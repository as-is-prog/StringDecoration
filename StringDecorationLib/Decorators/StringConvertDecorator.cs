using StringDecorationLib.Utils;
using StringDecorationLibContract.Decorators;
using System.Collections.Generic;
using System.Linq;

namespace StringDecorationLib.Decorators
{
    /// <summary>
    /// 全角にするデコレータ
    /// </summary>
    internal class StringConvertDecorator : IStringDecorator
    {

        #region 定数
        /// <summary>
        /// 全角に置換する文字のディクショナリ
        /// </summary>
        private static IDictionary<char, char> ReplaceCharDictionary = new Dictionary<char, char>
        {
            {'0' ,  '０'},
            {'1' ,  '１'},
            {'2' ,  '２'},
            {'3' ,  '３'},
            {'4' ,  '４'},
            {'5' ,  '５'},
            {'6' ,  '６'},
            {'7' ,  '７'},
            {'8' ,  '８'},
            {'9' ,  '９'}, 

            {'a' ,  'ａ'},
            {'b' ,  'ｂ'},
            {'c' ,  'ｃ'},
            {'d' ,  'ｄ'},
            {'e' ,  'ｅ'},
            {'f' ,  'ｆ'},
            {'g' ,  'ｇ'},
            {'h' ,  'ｈ'},
            {'i' ,  'ｉ'},
            {'j' ,  'ｊ'},
            {'k' ,  'ｋ'},
            {'l' ,  'ｌ'},
            {'m' ,  'ｍ'},
            {'n' ,  'ｎ'},
            {'o' ,  'ｏ'},
            {'p' ,  'ｐ'},
            {'q' ,  'ｑ'},
            {'r' ,  'ｒ'},
            {'s' ,  'ｓ'},
            {'t' ,  'ｔ'},
            {'u' ,  'ｕ'},
            {'v' ,  'ｖ'},
            {'w' ,  'ｗ'},
            {'x' ,  'ｘ'},
            {'y' ,  'ｙ'},
            {'z' ,  'ｚ'},

            {'A' ,  'Ａ'},
            {'B' ,  'Ｂ'},
            {'C' ,  'Ｃ'},
            {'D' ,  'Ｄ'},
            {'E' ,  'Ｅ'},
            {'F' ,  'Ｆ'},
            {'G' ,  'Ｇ'},
            {'H' ,  'Ｈ'},
            {'I' ,  'Ｉ'},
            {'J' ,  'Ｊ'},
            {'K' ,  'Ｋ'},
            {'L' ,  'Ｌ'},
            {'M' ,  'Ｍ'},
            {'N' ,  'Ｎ'},
            {'O' ,  'Ｏ'},
            {'P' ,  'Ｐ'},
            {'Q' ,  'Ｑ'},
            {'R' ,  'Ｒ'},
            {'S' ,  'Ｓ'},
            {'T' ,  'Ｔ'},
            {'U' ,  'Ｕ'},
            {'V' ,  'Ｖ'},
            {'W' ,  'Ｗ'},
            {'X' ,  'Ｘ'},
            {'Y' ,  'Ｙ'},
            {'Z' ,  'Ｚ'},

            {'ｱ', 'ア'},
            {'ｲ', 'イ'}, 
            {'ｳ', 'ウ'}, 
            {'ｴ', 'エ'}, 
            {'ｵ', 'オ'},
            {'ｶ', 'カ'}, 
            {'ｷ', 'キ'}, 
            {'ｸ', 'ク'}, 
            {'ｹ', 'ケ'}, 
            {'ｺ', 'コ'},
            {'ｻ', 'サ'}, 
            {'ｼ', 'シ'}, 
            {'ｽ', 'ス'}, 
            {'ｾ', 'セ'}, 
            {'ｿ', 'ソ'},
            {'ﾀ', 'タ'}, 
            {'ﾁ', 'チ'}, 
            {'ﾂ', 'ツ'}, 
            {'ﾃ', 'テ'}, 
            {'ﾄ', 'ト'},
            {'ﾅ', 'ナ'}, 
            {'ﾆ', 'ニ'}, 
            {'ﾇ', 'ヌ'}, 
            {'ﾈ', 'ネ'}, 
            {'ﾉ', 'ノ'},
            {'ﾊ', 'ハ'}, 
            {'ﾋ', 'ヒ'}, 
            {'ﾌ', 'フ'}, 
            {'ﾍ', 'ヘ'}, 
            {'ﾎ', 'ホ'},
            {'ﾏ', 'マ'}, 
            {'ﾐ', 'ミ'}, 
            {'ﾑ', 'ム'}, 
            {'ﾒ', 'メ'}, 
            {'ﾓ', 'モ'},
            {'ﾔ', 'ヤ'}, 
            {'ﾕ', 'ユ'}, 
            {'ﾖ', 'ヨ'},
            {'ﾗ', 'ラ'}, 
            {'ﾘ', 'リ'}, 
            {'ﾙ', 'ル'}, 
            {'ﾚ', 'レ'}, 
            {'ﾛ', 'ロ'},
            {'ﾜ', 'ワ'}, 
            {'ｦ', 'ヲ'}, 
            {'ﾝ', 'ン'},

            {'!','！'},
            {'#','＃'},
            {'$','＄'},
            {'%','％'},
            {'&','＆'},
            {'\'','’'},
            {'(','（'},
            {')','）'},
            {'*','＊'},
            {'+','＋'},
            {',','，'},
            {'-','ー'},
            {'.','．'},
            {'/','／'},
            {';','；'},
            {':','：'},
            {'<','＜'},
            {'=','＝'},
            {'>','＞'},
            {'?','？'},
            {'@','＠'},
            {'[','［'},
            {'\\','＼'},
            {']','］'},
            {'^','＾'},
            {'_','＿'},
            {'`','｀'},
            {'{','｛'},
            {'|','｜'},
            {'}','｝'},
            {'~','〜'},
            {'¥','￥'}


        };
        #endregion
        

        public string DecorateAll(string allText)
        {
            return allText?.Select(c => DecirateSingle(c))
                           .JoinString();
        }

        private static string DecirateSingle(char singleChar)
        {
            var c = ReplaceCharDictionary.TryGetValue(singleChar, out var replaced)
                ? replaced
                : singleChar;

            return $"{c}";
        }
    }
}
